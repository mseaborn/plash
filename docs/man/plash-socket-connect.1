.TH plash\-socket\-connect 1   
.SH NAME
plash\-socket\-connect \- Get a reference to a Plash object that was exported to a socket
.SH SYNOPSIS
.nf
def \fIvariable\-name\fR = capcmd plash\-socket\-connect => \fIsocket\-pathname\fR
.fi
.SH DESCRIPTION
The program \fIplash\-socket\-publish\fR will make a Plash object
reference available via a socket. \fIplash\-socket\-connect\fR is its
counterpart: it gets a copy of the reference from the socket, and
returns it. These programs can be used to share object references
between different instances of the Plash shell.
.PP
This is a command that is only useful when called using a "capcmd"
expression from Plash.
.PP
You must grant the program write access to the socket for it to be
able to connect to the socket (hence the use of "=>" in the synopsis).
.SH "RETURN VALUE"
The return value given by exit() isn't used. This program returns an
object reference using the "return_cont" mechanism. It doesn't exit
until all the references to the object have been dropped.
.SH LIMITATIONS
The process has to stick around as a proxy to forward method calls.
.SH EXAMPLES
.nf

def edit_file = capcmd plash\-run\-emacs ...
plash\-socket\-publish => ~/tmp/emacs /x=edit_file
.fi
.PP
Then in another shell:
.PP
.nf

def edit_file = capcmd plash\-socket\-connect => ~/tmp/emacs
edit_file => some\-file.txt
.fi
.SH "SEE ALSO"
plash, plash\-socket\-publish, plash\-run\-emacs
.PP
/usr/share/doc/plash
.SH AUTHOR
Mark Seaborn <mseaborn@onetel.com>
