#!/usr/bin/python

import os
import re
import subprocess
import sys

import plash_pkg


verbose = True

def read_control_file(filename):
    fh = open(filename, "r")
    try:
        return [plash_pkg.block_fields(b)
                for b in plash_pkg.file_blocks(fh)]
    finally:
        fh.close()

def unpack_into_cache(unpack_cache, pkg):
    match = re.search("/([^/]+)$", pkg["filename"])
    assert match is not None
    leafname = match.group(1)
    deb_file = os.path.join("cache", leafname)
    if not os.path.exists(deb_file):
        raise Exception("File not present: %s" % deb_file)

    out_dir = os.path.join(unpack_cache,
                           "%(package)s_%(version)s" % pkg)
    if not os.path.exists(out_dir):
        os.mkdir(out_dir)

    # Extract main files -- data.tar.gz from the .deb
    dest = os.path.join(out_dir, "data")
    if not os.path.exists(dest):
        print "unpack", dest
        dest_tmp = "%s.tmp" % dest
        if os.path.exists(dest_tmp):
            raise Exception("Remove %s and try again" % dest_tmp)
        rc = subprocess.call(["dpkg-deb", "-x", deb_file, dest_tmp])
        assert rc == 0
        os.rename(dest_tmp, dest)

    # Extract control files -- control.tar.gz from the .deb
    dest = os.path.join(out_dir, "control")
    if not os.path.exists(dest):
        print "unpack", dest
        dest_tmp = "%s.tmp" % dest
        if os.path.exists(dest_tmp):
            raise Exception("Remove %s and try again" % dest_tmp)
        rc = subprocess.call(["dpkg-deb", "-e", deb_file, dest_tmp])
        assert rc == 0
        os.rename(dest_tmp, dest)

def unpack_to_single_dir(unpack_cache, dest_dir, pkg):
    src = os.path.join(unpack_cache,
                       "%(package)s_%(version)s" % pkg,
                       "data")
    for leaf in os.listdir(src):
        rc = subprocess.call(["cp", "-lr", os.path.join(src, leaf),
                              dest_dir])
        assert rc == 0

def mkdir_p(dir_path):
    if not os.path.exists(dir_path):
        os.makedirs(dir_path)

def fill_out_dpkg_status(dest_dir, packages):
    dpkg_dir = os.path.join(dest_dir, "var", "lib", "dpkg")
    mkdir_p(dpkg_dir)
    fh = open(os.path.join(dpkg_dir, "status"), "w")
    try:
        for pkg in packages:
            fh.write("Package: %(package)s\n"
                     "Version: %(version)s\n"
                     "Status: install ok installed\n\n"
                     % pkg)
    finally:
        fh.close()

def main(args):
    if len(args) != 2:
        print "Usage: %s <package-list> <dest-dir>" % sys.argv[0]
        sys.exit(1)
    package_list = args[0]
    dest_dir = args[1]
    unpack_cache = plash_pkg.get_unpack_cache_dir()
    packages = read_control_file(package_list)
    for pkg in packages:
        unpack_into_cache(unpack_cache, pkg)
    for pkg in packages:
        unpack_to_single_dir(unpack_cache, dest_dir, pkg)
    fill_out_dpkg_status(dest_dir, packages)


if __name__ == "__main__":
    main(sys.argv[1:])
