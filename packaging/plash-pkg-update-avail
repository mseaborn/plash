#!/usr/bin/python

import os
import re
import subprocess
import sys

import plash_pkg


def fetch_packages_file(src, dest_dir, arch):
    url = plash_pkg.join_with_slash(src["S_base"],
                plash_pkg.join_with_slash(src["S_component"],
                                          "binary-%s/Packages.gz" % arch))
    match = re.match("http://(.*)$", url)
    if not match:
        raise Exception("Only HTTP is supported: %s" % url)
    leafname = re.sub("/", "_", match.group(1))
    filename = os.path.join(dest_dir, leafname)
    if not os.path.exists(filename):
        print "Get %s" % url
        subprocess.call(["curl", url, "-o", filename])
    else:
        print "Hit %s" % url
    return filename

def open_gunzip(filename):
    proc = subprocess.Popen(["zcat", filename],
                            stdout=subprocess.PIPE,
                            bufsize=8000)
    return proc.stdout

def combine_package_lists(out, src_list):
    regexp_desc = re.compile(r"^Description:.*\n(\s+.*)*(\n|\Z)", re.M | re.I)
    for src in src_list:
        filename = src["S_file"]
        fh = open_gunzip(filename)
        try:
            for block in plash_pkg.file_blocks(fh):
                # Remove the Description field to save space.
                block = "".join(block)
                block = regexp_desc.sub("", block, 1)
                out.write("Base-URL: %s\n" % src["S_base"])
                out.write(block)
                out.write("\n")
        finally:
            fh.close()

def main():
    arch = plash_pkg.get_arch()
    output_dir = plash_pkg.get_package_list_cache_dir()

    src_list = plash_pkg.read_sources_list("sources.list")
    for src in src_list:
        src["S_file"] = fetch_packages_file(src, output_dir, arch)

    out = open(plash_pkg.get_package_list_combined(), "w")
    try:
        combine_package_lists(out, src_list)
    finally:
        out.close()


if __name__ == "__main__":
    main()
