#!/usr/bin/python

# Copyright (C) 2006, 2007 Mark Seaborn
#
# This file is part of Plash.
#
# Plash is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# Plash is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Plash; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
# USA.

# Usage:  launch-pet-app --app-dir <app-dir> [--open-files [<file> ...]]


import os
import sys
import traceback

import plash.env
import plash.mainloop
import plash.namespace as ns
import plash.pola_run_args as pola_run_args
import plash.powerbox
import plash.process

import plash_pkg.control
import plash_pkg.launch


def read_config(filename):
    file = open(filename, "r")
    try:
        return plash_pkg.control.block_fields(plash_pkg.control.get_block(file))
    finally:
        file.close()

def main(args):
    app_dir = None
    files = []

    while len(args) > 0:
        if args[0] == '--app-dir':
            app_dir = args[1]
            args = args[2:]
        elif args[0] == '--open-file':
            files.append(args[1])
            args = args[2:]
        elif args[0] == '--open-files':
            files.extend(args[1:])
            args = []
        else:
            break

    if app_dir is None:
        raise Exception("--app-dir argument missing")

    try:
        launch_app(app_dir, files, args)
    except:
        traceback.print_exc()
        f = open(os.path.join(app_dir, "launch_log"), "a")
        f.write("--------\n")
        f.write("Got exception:\n" + traceback.format_exc())
        f.close()

def launch_app(app_dir, files, args):
    config = read_config(os.path.join(app_dir, "config"))

    proc, state = plash_pkg.launch.make_process(app_dir)

    state.handle_args(args)

    if proc.cmd == None:
        # Run the configured command
        proc.cmd = "/bin/sh"
        proc.args = ["-c", config["exec"], "-"]

    pola_run_args.set_fake_uids(proc)

    # TODO: grant read-only access to apps configured as viewers
    for filename in files:
        ns.resolve_populate(state.caller_root, proc.root_node,
                            filename,
                            flags=ns.FS_FOLLOW_SYMLINKS | ns.FS_SLOT_RWC)
        proc.args.append(filename)

    proc.caps["powerbox_req_filename"] = \
        plash.powerbox.Powerbox(user_namespace = state.caller_root,
                                app_namespace = proc.root_node,
                                pet_name = config["pet-name"])
    plash.mainloop.use_gtk_mainloop()

    pid = proc.spawn()
    plash.mainloop.run_server()
    # No need to wait for subprocess to exit.


if __name__ == "__main__":
    main(sys.argv[1:])
