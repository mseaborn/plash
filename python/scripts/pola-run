#!/usr/bin/python

# Copyright (C) 2006, 2007 Mark Seaborn
#
# This file is part of Plash.
#
# Plash is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# Plash is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Plash; if not, write to the Free Software
# Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301,
# USA.

import gobject
import sys
import os

import plash.env
import plash.mainloop
import plash.namespace as ns
import plash.pola_run_args
from plash.pola_run_args import BadArgException
import plash.process


def usage():
    print """
Usage: pola-run [options]
  --prog <file>   Gives filename of executable to invoke
  [ -f[awls]... <path>
                  Grant access to given file or directory
  | -t[awls]... <path-dest> <path-src>
                  Attach file/dir <path-src> into namespace at <path-dest>
  | -a <string>   Add string to argument list
  | --cwd <dir>   Set the current working directory (cwd)
  | --no-cwd      Set the cwd to be undefined
  | --copy-cwd    Copy cwd from calling process
  ]...
  [-B]            Grant access to /usr, /bin and /lib
  [--x11]         Grant access to X11 Window System
  [--net]         Grant access to network config files
  [--log]         Print method calls client makes to file server
  [--pet-name <name>]
  [--powerbox]
  [-e <command> <arg>...]
"""

def return_status_and_fork_to_background(exit_status):
    pid = os.fork()
    if pid != 0:
        os._exit(exit_status)

def main(args):
    proc = plash.process.ProcessSpecWithNamespace()
    proc.env = os.environ.copy()

    state = plash.pola_run_args.ProcessSetup(proc)
    state.namespace_empty = True
    state.caller_root = plash.env.get_root_dir()
    state.cwd = ns.resolve_dir(state.caller_root, os.getcwd())
    state.pet_name = None
    state.powerbox = False

    try:
        state.handle_args(args)
        if proc.cmd == None:
            raise BadArgException, "No command name given (use --prog or -e)"
    except BadArgException, msg:
        print "pola-run: error:", msg
        sys.exit(1)

    if state.namespace_empty:
        print "pola-run: warning: namespace empty, try -B for default namespace"

    plash.pola_run_args.set_fake_uids(proc)

    if state.cwd != None:
        proc.cwd_path = ns.dirstack_get_path(state.cwd)

    if state.powerbox:
        powerbox = __import__("plash.powerbox")
        # The pet name defaults to the executable name
        if state.pet_name == None:
            state.pet_name = proc.cmd
        proc.caps['powerbox_req_filename'] = \
            powerbox.Powerbox(user_namespace = state.caller_root,
                              app_namespace = proc.root_node,
                              pet_name = state.pet_name)
        plash.mainloop.use_gtk_mainloop()

    fwd_stdout, fwd_stderr = plash.pola_run_args.proxy_terminal(proc)
    pid = proc.spawn()
    
    reason_to_run = plash.mainloop.ReasonToRun()
    def callback(pid_unused, status):
        reason_to_run.dispose()
        fwd_stdout.flush()
        fwd_stderr.flush()
        if os.WIFEXITED(status):
            return_status_and_fork_to_background(os.WEXITSTATUS(status))
        elif os.WIFSIGNALED(status):
            return_status_and_fork_to_background(101)
        else:
            return_status_and_fork_to_background(102)
    gobject.child_watch_add(pid, callback)
    plash.mainloop.run_server()


if __name__ == "__main__":
    main(sys.argv[1:])
