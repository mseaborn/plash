# Copyright (C) 2004 Mark Seaborn
#
# This file is part of Plash, the Principle of Least Authority Shell.
#
# Plash is free software; you can redistribute it and/or modify it
# under the terms of the GNU Lesser General Public License as
# published by the Free Software Foundation; either version 2.1 of
# the License, or (at your option) any later version.
#
# Plash is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
# Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public
# License along with Plash; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307
# USA.


# This is used by the `source' command
command_list =
    c:command semicolon rest:command_list {{ mk_commands_cons(r, c, rest) }}
  / null {{ 0 }};

command =
    "cd" ws dir:pathname {{ mk_chdir(r, dir) }}
  / "cd" ws {{ mk_chdir(r, char_cons(r, '~', 0)) }}
  / "fg" ws n:number ws {{ mk_command_fg(r, n) }}
  / "bg" ws n:number ws {{ mk_command_bg(r, n) }}
  / kw_def var:var_name equals e:expr1
	{{ mk_def_binding(r, var, e) }}
  / kw_source file:pathname {{ mk_command_source(r, file) }}
  / !kw_def cmd:pipeline bg_flag:(ampersand {{ (void *) 1 }} / null {{ 0 }})
	{{ mk_command(r, cmd, (int) bg_flag) }};

pipeline =
    inv:invocation pipe_bar pl:pipeline {{ mk_pipeline_cons(r, inv, pl) }}
  / inv:invocation {{ mk_pipeline_inv(r, inv) }};

invocation =
  no_sec:(bang_bang {{ (void *) 1 }} / null {{ 0 }})
  cmd:pathname
  args:arglist1
    {{ mk_invocation(r, (int) no_sec, cmd, args) }};

# The ambient file list is just another arg list.  It can contain string
# arguments, but these will be ignored (and give a warning).
# This serves two purposes: you can easily put "+" into an arg list
# and call the standard Unix shell instead in order to explore filesystem
# that was created.  It's also simpler than defining something special
# for ambient arg lists!
arglist1 = a:arglist2 plus fs:arglist1 {{ mk_arg_cat(r, a, mk_arg_ambient(r, fs)) }}
         / arglist2;
arglist2 = a1:arglist3 arrow a2:arglist3
             {{ mk_arg_cat(r, mk_arg_read(r, a1), mk_arg_write(r, a2)) }}
         / arglist3;
arglist3 = a1:arglist4 a2:arglist3 {{ mk_arg_cat(r, a1, a2) }}
         / null {{ mk_arg_empty(r) }};
arglist4 = c_open l:arglist1 c_close {{ l }}
         / arg;

arg = s:option {{ mk_arg_string(r, s) }}
    / s:string_literal {{ mk_arg_string(r, s) }}
    / redirection
    / f:pathname equals e:expr2 {{ mk_arg_fs_binding(r, f, e) }}
#    / f:pathname {{ mk_arg_filename(r, f) }};
    / f:glob_pathname {{ mk_arg_glob_filename(r, f) }};

redirection =
  fd:(n:number ws {{ n }} / null {{ 0 }})
  type:(">>" {{ (void *) REDIR_OUT_APPEND }}
        / ">" {{ (void *) REDIR_OUT_TRUNC }}
        / "<>" {{ (void *) REDIR_IN_OUT }}
        / "<" {{ (void *) REDIR_IN }}) ws
  dest:('&' n:number ws {{ mk_dest_fd(r, n) }}
        / p:pathname {{ mk_dest_file(r, p) }})
  {{ mk_arg_redirection(r, fd, (int) type, dest) }};

# pathname = s:(!wschar c:char {{ (void*) c }})+ ws;
pathname = !(![a-zA-Z0-9_/.~]) s:pathname_aux ws {{ s }};
pathname_aux = c:(!(wschar / [&|*={}();]) c:char {{ (void*) c }})
               rest:(pathname_aux / null {{ 0 }})
               {{ char_cons(r, (int) c, rest) }};

glob_pathname =
	!(![a-zA-Z0-9_/.~*])
	p:('/'+ p:glob_pathname_aux3
		{{ mk_glob_path(r, mk_start_root(r), p) }}
           / '~' user:(user_name / null {{ 0 }}) p:glob_pathname_aux2
		{{ mk_glob_path(r, mk_start_home(r, user), p) }}
           / p:glob_pathname_aux1
		{{ mk_glob_path(r, mk_start_cwd(r), p) }})
	ws {{ p }};
glob_pathname_aux1 = name:glob_leafname rest:glob_pathname_aux2
			{{ mk_glob_path_cons(r, name, rest) }};
glob_pathname_aux2 = '/'+ x:glob_pathname_aux3 {{ x }}
		     / null {{ mk_glob_path_end(r, 0 /* slash */) }};
glob_pathname_aux3 = glob_pathname_aux1 / null
			{{ mk_glob_path_end(r, 1 /* slash */) }};
glob_leafname =
	c:(!(wschar / [&|/*={}();]) c:char {{ (void*) c }}
	   / '*' {{ (void*) GLOB_STAR }})
	rest:(glob_leafname / null {{ 0 }})
	{{ char_cons(r, (int) c, rest) }};
user_name = !(wschar / [&|*/={}();]) c:char rest:(user_name / null {{ 0 }})
		{{ char_cons(r, (int) c, rest) }};


string_literal =
    '"' s:str_lit1 '"' ws {{ s }}
  / '\'' s:str_lit2 '\'' ws {{ s }};
str_lit1 = !'"' c:char rest:str_lit1 {{ char_cons(r, (int) c, rest) }} / null {{ 0 }};
str_lit2 = !'\'' c:char rest:str_lit2 {{ char_cons(r, (int) c, rest) }} / null {{ 0 }};

# `=' is allowed in options strings, so you can write '--foo=bar' without
# it being rejected or interpreted as attaching an object into the
# filesystem.
option = '-' s:opt_str ws {{ char_cons(r, '-', s) }};
opt_str = !(wschar / [&|*/{}();]) c:char rest:opt_str
             {{ char_cons(r, (int) c, rest) }} / null {{ 0 }};

char = '\\' '\\' {{ (void*) '\\' }}
     / '\\' '\'' {{ (void*) '\'' }}
     / '\\' '"' {{ (void*) '"' }}
     / '\\' ' ' {{ (void*) ' ' }}
     / '\\' 'n' {{ (void*) '\n' }}
     / '\\' 't' {{ (void*) '\t' }}
     / '\\' c:[&|*+={}();] {{ (void*) c }}
     / !('\\' .) c:. {{ (void*) c }};

number = c:[0-9] rest:(number / null {{ 0 }}) {{ char_cons(r, (int) c, rest) }};

var_name = c:[a-zA-Z_] rest:var_name_aux {{ char_cons(r, (int) c, rest) }};
var_name_aux =
    c:[a-zA-Z0-9_] rest:var_name_aux {{ char_cons(r, (int) c, rest) }}
  / ws {{ 0 }};

expr1 = kw_capcmd cmd:pathname args:arglist1 {{ mk_cap_cmd(r, cmd, args) }}
      / kw_f f:pathname {{ mk_expr_filename(r, f) }}
      / kw_mkfs args:arglist1 {{ mk_expr_mkfs(r, args) }}
      / expr2;
expr2 = v:var_name {{ mk_expr_var(r, v) }}
      / b_open e:expr1 b_close {{ e }};


# Lexical

kw_def = "def" ![a-zA-Z0-9_] ws;
kw_capcmd = "capcmd" ![a-zA-Z0-9_] ws;
kw_f = "F" ![a-zA-Z0-9_] ws;
kw_mkfs = "mkfs" ![a-zA-Z0-9_] ws;
kw_source = "source" ![a-zA-Z0-9_] ws;

c_open = '{' ws;
c_close = '}' ws;
b_open = '(' ws;
b_close = ')' ws;
arrow = "=>" ws;
plus = '+' ws;
ampersand = '&' ws;
pipe_bar = '|' ws;
bang_bang = "!!" ws;
equals = '=' ws;
semicolon = ';' ws;

# Comments match to the next newline, or to the end of the file
ws = (wschar / '#' (!'\n' .)* ('\n' / null))*;
wschar = ' ' / '\t' / '\n';
